// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";
  var EventHubConnector, Injector, Socket, crypto, events, querystring, socketIO, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("lodash");

  Injector = require("lib/injector");

  crypto = require("crypto");

  querystring = require("querystring");

  events = require("events");

  socketIO = require("socket.io-client");

  EventHubConnector = require("lib/EventHubConnector");

  Socket = (function(_super) {
    __extends(Socket, _super);

    Socket.prototype._RECONNECT_MIN_DELAY = 1000;

    Socket.prototype._RECONNECT_MAX_DELAY = 10000;

    function Socket(args) {
      this.logger = args.logger, this.config = args.config;
      this._connectString = "ws://" + this.config.get("eventhub:address") + ":" + this.config.get("eventhub:port");
      this._clientId = this.config.get("client:id");
      this._signature = this.config.get("client:sign");
    }

    Socket.prototype.configure = function() {
      this._socket.on("connect", (function(_this) {
        return function() {
          _this.removeAllListeners("reconnect");
          _this.once("reconnect", function() {
            return _this.reconnect();
          });
          _this._delay = _this._RECONNECT_MIN_DELAY;
          _this.logger.info("client '" + _this._clientId + "' has connected to eventhub socket");
          return _this.emit("connected", {
            clientId: _this._clientId
          });
        };
      })(this));
      this._socket.on("message", (function(_this) {
        return function(message, callback) {
          _this.logger.info("received socket COMMAND '" + message.command.name + "'");
          return _this.emit("command", {
            command: message.command,
            callback: callback
          });
        };
      })(this));
      this._socket.on("disconnect", (function(_this) {
        return function() {
          _this.logger.info("client '" + _this._clientId + "' has disconnected to eventhub socket");
          return _this.emit("reconnect");
        };
      })(this));
      this._socket.once("error", (function(_this) {
        return function(err) {
          _this.logger.error("Socket connection error:\n'" + err + "'");
          return _this.emit("reconnect");
        };
      })(this));
      return this.once("reconnect", (function(_this) {
        return function() {
          return _this.reconnect();
        };
      })(this));
    };

    Socket.prototype.start = function() {
      var query;
      query = querystring.stringify({
        id: this._clientId,
        sign: this._signature
      });
      this._socket = socketIO.connect(this._connectString, {
        reconnect: false,
        query: query
      });
      this.configure();
      return this.emit("start");
    };

    Socket.prototype.reconnect = _.throttle(function() {
      this.logger.info("reconnect invoked");
      this._socket.socket.disconnect();
      if (this._delay == null) {
        this._delay = this._RECONNECT_MIN_DELAY;
      }
      this._delay = this._delay < this._RECONNECT_MAX_DELAY ? this._delay : this._RECONNECT_MAX_DELAY;
      this.removeAllListeners("reconnect");
      this.once("reconnect", (function(_this) {
        return function() {
          return _this.reconnect();
        };
      })(this));
      this._socket.once("error", (function(_this) {
        return function(err) {
          _this.logger.error("Socket connection error. Trying to reconnect. Error:\n" + err);
          setTimeout(function() {
            return _this.emit("reconnect");
          }, _this._delay);
          _this._delay *= 2;
          return _this.emit("error", err);
        };
      })(this));
      return this._socket.socket.connect();
    }, Socket._RECONNECT_MIN_DELAY);

    return Socket;

  })(EventHubConnector);

  module.exports = Socket;

}).call(this);

//# sourceMappingURL=index.map
