// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var Socket;

  Socket = (function() {
    var _RECONNECT_MAX_DELAY, _RECONNECT_MIN_DELAY;

    _RECONNECT_MIN_DELAY = 1000;

    _RECONNECT_MAX_DELAY = 10000;

    function Socket(args) {
      this.$socketIOClient = args.$socketIOClient, this.server = args.server, this.logger = args.logger, this.eventHandler = args.eventHandler, this.$config = args.$config;
      this._connectString = "ws://" + this.$config.get("eventhub:address") + ":" + this.$config.get("eventhub:port");
      this._clientId = this.$config.get("clientId");
    }

    Socket.prototype.configure = function() {
      var _this = this;
      this._socket.on("connect", function() {
        _this.logger.info("client '" + _this._clientId + "' has connected to eventhub socket");
        return _this.eventHandler.emit("socket/connect");
      });
      this._socket.on("disconnect", function() {
        _this.logger.info("client '" + _this._clientId + "' has disconnected to eventhub socket");
        return _this.reconnect();
      });
      return this._socket.once("error", function(err) {
        _this.logger.error("Socket connection error:\n" + err);
        _this.reconnect();
        return _this.eventHandler.emit("socket/error");
      });
    };

    Socket.prototype.start = function() {
      this._socket = this.$socketIOClient.connect(this._connectString, {
        reconnect: false
      });
      this.configure();
      return this.eventHandler.emit("socket/start");
    };

    Socket.prototype.reconnect = function() {
      var _this = this;
      if (this._delay == null) {
        this._delay = _RECONNECT_MIN_DELAY;
      }
      this._delay = this._delay < _RECONNECT_MAX_DELAY ? this._delay : _RECONNECT_MAX_DELAY;
      this._socket.once("error", function(err) {
        _this.logger.error("Socket connection error. Trying to reconnect.\n" + err);
        setTimeout(function() {
          return _this.reconnect();
        }, _this._delay);
        _this._delay *= 2;
        return _this.eventHandler.emit("socket/error");
      });
      return this._socket.socket.connect();
    };

    return Socket;

  })();

  module.exports = Socket;

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
