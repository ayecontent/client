// Generated by CoffeeScript 1.7.0
(function() {
  "use strict";
  var Injector, Socket;

  Injector = require("lib/injector");

  Socket = (function() {
    var _RECONNECT_MAX_DELAY, _RECONNECT_MIN_DELAY;

    _RECONNECT_MIN_DELAY = 1000;

    _RECONNECT_MAX_DELAY = 10000;

    function Socket() {
      Injector.resolve((function(logger, config, socketIO, eventHandler) {
        this.logger = logger;
        this.config = config;
        this.socketIO = socketIO;
        this.eventHandler = eventHandler;
      }), this)();
      this._connectString = "ws://" + this.config.get("eventhub:address") + ":" + this.config.get("eventhub:port");
      this._clientId = this.config.get("clientId");
    }

    Socket.prototype.configure = function() {
      this._socket.on("connect", (function(_this) {
        return function() {
          _this.logger.info("client '" + _this._clientId + "' has connected to eventhub socket");
          return _this.eventHandler.emit("socket/connect");
        };
      })(this));
      this._socket.on("command", (function(_this) {
        return function(command, callback) {
          _this.logger.info("received socket COMMAND '" + command + "'");
          return _this.eventHandler.emit("socket/command", command, callback);
        };
      })(this));
      this._socket.on("disconnect", (function(_this) {
        return function() {
          _this.logger.info("client '" + _this._clientId + "' has disconnected to eventhub socket");
          return _this.reconnect();
        };
      })(this));
      return this._socket.once("error", (function(_this) {
        return function(err) {
          _this.logger.error("Socket connection error:\n" + err);
          _this.reconnect();
          return _this.eventHandler.emit("socket/error");
        };
      })(this));
    };

    Socket.prototype.start = function() {
      this._socket = this.socketIO.connect(this._connectString, {
        reconnect: false
      });
      this.configure();
      return this.eventHandler.emit("socket/start");
    };

    Socket.prototype.reconnect = function() {
      if (this._delay == null) {
        this._delay = _RECONNECT_MIN_DELAY;
      }
      this._delay = this._delay < _RECONNECT_MAX_DELAY ? this._delay : _RECONNECT_MAX_DELAY;
      this._socket.once("error", (function(_this) {
        return function(err) {
          _this.logger.error("Socket connection error. Trying to reconnect.\n" + err);
          setTimeout(function() {
            return _this.reconnect();
          }, _this._delay);
          _this._delay *= 2;
          return _this.eventHandler.emit("socket/error");
        };
      })(this));
      return this._socket.socket.connect();
    };

    return Socket;

  })();

  module.exports = Socket;

}).call(this);

//# sourceMappingURL=index.map
