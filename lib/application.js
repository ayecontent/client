// Generated by CoffeeScript 1.7.1
"use strict";
var Application, Socket, Sync, exec, fs, util;

Socket = require("./../eventhub-connector/socket-connector");

Sync = require("./../sync");

util = require("util");

fs = require("fs");

exec = require('child_process').exec;

Application = (function() {
  function Application(args) {
    this.logger = args.logger, this.config = args.config;
    this.eventHubConnector = new Socket({
      logger: this.logger,
      config: this.config
    });
    this.sync = new Sync({
      logger: this.logger,
      config: this.config
    });
  }

  Application.prototype.replaceBasePath = function(source, dest) {
    if (dest == null) {
      dest = source;
    }
    return fs.readFile("" + source + ".template", 'utf8', (function(_this) {
      return function(err, data) {
        var result;
        result = data.replace(/%CLIENT_PATH%/g, _this.config.get('basepath')).replace(/%KEY_NAME%/g, _this.config.get('git:keyName'));
        return fs.writeFile("" + dest, result, 'utf8');
      };
    })(this));
  };

  Application.prototype.start = function() {
    this.replaceBasePath('ssh-shell');
    this.replaceBasePath('ssh', 'config/ssh');
    this.initListeners();
    this.eventHubConnector.start();
    return this.sync.syncReset((function(_this) {
      return function(err) {
        if (err != null) {
          return _this.logger.error(util.inspect(err, {
            depth: 30
          }));
        } else {
          return _this.sync.startAutoSync();
        }
      };
    })(this));
  };

  Application.prototype.initListeners = function() {
    this.eventHubConnector.on("reconnect", this.sync.syncReset.bind(this.sync));
    return this.eventHubConnector.on("command", (function(_this) {
      return function(command, callback) {
        return _this.sync.pushCommand(command, function(err, result) {
          if (err != null) {
            _this.logger.error(util.inspect(err, {
              depth: 30
            }));
            return callback(err);
          } else {
            return callback(null, result != null ? result : {
              result: "SUCCESS"
            });
          }
        });
      };
    })(this));
  };

  return Application;

})();

module.exports = Application;
