// Generated by CoffeeScript 1.7.1
"use strict";
var Logger, fs, moment, path, timestamp, winston,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

winston = require("winston");

path = require("path");

fs = require("fs-extra");

moment = require("moment");

timestamp = function() {
  return moment(new Date).format("YYYY-MM-DD HH:mm:ss,SSS");
};

Logger = (function(_super) {
  __extends(Logger, _super);

  Logger.prototype.time = {};

  function Logger() {
    var logFilePath, logFolder;
    logFolder = path.resolve(__dirname, "../log");
    fs.mkdirpSync(logFolder);
    logFilePath = path.join(logFolder, "client.log");
    this.transports = [
      new winston.transports.Console({
        timestamp: timestamp,
        colorize: true,
        level: "debug",
        handleExceptions: true
      }), new winston.transports.DailyRotateFile({
        timestamp: timestamp,
        filename: logFilePath,
        json: false,
        level: "debug",
        handleExceptions: true
      })
    ];
    Logger.__super__.constructor.call(this, {
      transports: this.transports
    });
  }

  Logger.prototype.startTime = function(command) {
    return this.time[command] = moment().valueOf();
  };

  Logger.prototype.printTime = function(command) {
    return "" + command + " duration: " + (moment().valueOf() - this.time[command]) + "ms";
  };

  return Logger;

})(winston.Logger);

module.exports = Logger;
