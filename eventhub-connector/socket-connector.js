// Generated by CoffeeScript 1.7.1
"use strict";
var EventHubConnector, Socket, errors, events, jwt, querystring, socketIO, util, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require("lodash");

querystring = require("querystring");

jwt = require("jsonwebtoken");

events = require("events");

errors = require("./../errors");

socketIO = require("socket.io-client");

util = require("util");

EventHubConnector = require("./../eventhub-connector");

Socket = (function(_super) {
  __extends(Socket, _super);

  Socket.prototype._RECONNECT_MIN_DELAY = 1000;

  Socket.prototype._RECONNECT_MAX_DELAY = 10000;

  function Socket(args) {
    this.logger = args.logger, this.config = args.config;
    this._connectString = "ws://" + this.config.get("eventhub:address") + ":" + this.config.get("eventhub:port");
    this._clientId = this.config.get("client:id");
    this._signature = this.config.get("client:sign");
  }

  Socket.prototype.initListeners = function() {
    this._socket.on("connect", (function(_this) {
      return function() {
        _this.logger.info("Client '" + _this._clientId + "' connected to EVENT-HUB. " + (_this.logger.timeEnd("Connection to EVENT-HUB")));
        return _this._delay = _this._RECONNECT_MIN_DELAY;
      };
    })(this));
    this._socket.on("message", (function(_this) {
      return function(message, callback) {
        var msg;
        _this.logger.info("Received EVENT-HUB message: '" + (util.inspect(message)) + "'");
        msg = "Finished processing of message '" + message.id + "'. SYNC-TYPE: '" + message.command.name + "'. Processing";
        _this.logger.time(msg);
        return _this.emit("command", message.command, function(err, result) {
          _this.logger.info(_this.logger.timeEnd(msg));
          if (err != null) {
            err = errors.stringifyError(err);
          }
          _this.logger.info("Sending message id '" + message.id + "' callback to the eventhub. Callback: '" + (util.inspect({
            err: err,
            result: result
          })) + "'");
          return callback(err, result);
        });
      };
    })(this));
    this._socket.on("disconnect", (function(_this) {
      return function() {
        return _this.logger.info("Client '" + _this._clientId + "' disconnected from EVENT-HUB");
      };
    })(this));
    return this._socket.on("error", (function(_this) {
      return function(err) {
        return _this.logger.error("EVENT-HUB connection error: '" + err + "'");
      };
    })(this));
  };

  Socket.prototype.start = function() {
    var client, query, token;
    this.logger.info("Start Socket EVENT-HUB Connector");
    client = this.config.get("client");
    token = jwt.sign({
      client: client
    }, this.config.get("secret"), {
      expiresInMinutes: 60 * 5
    });
    query = querystring.stringify({
      token: token,
      id: client.id
    });
    this.logger.info("Start connection to EVENT-HUB");
    this.logger.time("Connection to EVENT-HUB");
    this._socket = socketIO.connect(this._connectString, {
      query: query
    });
    return this.initListeners();
  };

  return Socket;

})(EventHubConnector);

module.exports = Socket;
