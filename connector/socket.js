// Generated by CoffeeScript 1.7.1
"use strict";
var EventHubConnector, Socket, crypto, errors, events, querystring, socketIO, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require("lodash");

crypto = require("crypto");

querystring = require("querystring");

events = require("events");

errors = require("./../errors");

socketIO = require("socket.io-client");

EventHubConnector = require("./../connector");

Socket = (function(_super) {
  __extends(Socket, _super);

  Socket.prototype._RECONNECT_MIN_DELAY = 1000;

  Socket.prototype._RECONNECT_MAX_DELAY = 10000;

  function Socket(args) {
    this.logger = args.logger, this.config = args.config;
    this._connectString = "ws://" + this.config.get("eventhub:address") + ":" + this.config.get("eventhub:port");
    this._clientId = this.config.get("client:id");
    this._signature = this.config.get("client:sign");
  }

  Socket.prototype.configure = function() {
    this._socket.on("connect", (function(_this) {
      return function() {
        _this._delay = _this._RECONNECT_MIN_DELAY;
        _this.logger.info("client '" + _this._clientId + "' has connected to eventhub socket");
        return _this.emit("connected", {
          clientId: _this._clientId
        });
      };
    })(this));
    this._socket.on("message", (function(_this) {
      return function(message, callback) {
        _this.logger.info("received socket COMMAND '" + message.command.name + "'");
        return _this.emit("command", message.command, function(err, result) {
          if (err != null) {
            err = errors.stringifyError(err);
          }
          return callback(err, result);
        });
      };
    })(this));
    this._socket.on("disconnect", (function(_this) {
      return function() {
        _this.logger.info("client '" + _this._clientId + "' has disconnected to eventhub socket");
        return _this.reconnect();
      };
    })(this));
    return this._socket.on("error", (function(_this) {
      return function(err) {
        _this.logger.error("Socket connection error:\n'" + err + "'");
        return _this.reconnect();
      };
    })(this));
  };

  Socket.prototype.start = function() {
    var client, query;
    client = this.config.get("client");
    query = querystring.stringify(client);
    this._socket = socketIO.connect(this._connectString, {
      reconnect: false,
      query: query
    });
    this.configure();
    return this.emit("start");
  };

  Socket.prototype.reconnect = function() {
    this._socket.socket.disconnect();
    if (this._delay == null) {
      this._delay = this._RECONNECT_MIN_DELAY;
    }
    this._delay = this._delay < this._RECONNECT_MAX_DELAY ? this._delay : this._RECONNECT_MAX_DELAY;
    setTimeout((function(_this) {
      return function() {
        _this.logger.info("reconnect invoked");
        return _this._socket.socket.connect();
      };
    })(this), this._delay);
    return this._delay *= 2;
  };

  return Socket;

})(EventHubConnector);

module.exports = Socket;
